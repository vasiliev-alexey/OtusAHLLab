@page "/IncomeFriendRequest"

@using Microsoft.AspNetCore.Http
@using OtusAHLLab.Data
@using OtusAHLLab.Modules.Enums
@using OtusAHLLab.Modules.Secutity

@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Authentication;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Identity.UI.Services;

@inject IUserService UserService
@inject UserManager<AppUser> UserManager

<h1>Запросы на дружбу входящие</h1>

@if (UserService == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Имя</th>
                <th>Фамилия</th>
                <th>Возраст</th>
                <th>Город</th>
                <th>Увлечения</th>
                <th>Пол</th>
                <th>-</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
            <tr  >   
                 
                <td>@user.FirstName</td>
                <td>@user.LastName</td>
                <td>@user.Age</td>
                <td>@user.City</td>
                <td>@user.Hobby</td>
                <td>@user.Gender</td>

                <td>
                    <button class="btn btn-success" @onclick="@(() => ToFriend(@user))">Подтвердить</button>
                    <button class="btn btn-success" @onclick="@(() => ToCancel(@user))">Отказаться</button>
                </td>
                

            </tr>
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<AppUser> users;


    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }


    protected override async Task OnInitializedAsync()
    {

        var authState = await authenticationStateTask;
        var user = authState.User;


        // var id= UserManager.GetUserId(user);
        var id = UserManager.GetUserId(user);
        users = await UserService.GetIncomeFriendships(Convert.ToInt64(id));



        // users = await UserService.GetAllUserAsync(StatusCode.All);
    }

    private async Task<bool> ToFriend(AppUser id)
    {
        var authState = await authenticationStateTask;
        var user = authState.User;
        var userId = UserManager.GetUserId(user);
        await UserService.ConfirmFriendship( id.Id, Convert.ToInt64(userId));
        Console.WriteLine("Дружим");






        var u =  users.ToList();
        u.Remove(id);
        users = u;

        StateHasChanged();
        return await Task.FromResult(true);
    }

    private async Task<bool> ToCancel(AppUser user)
    {
        
        var authState = await authenticationStateTask;
        var currUser = authState.User;
        var userId = UserManager.GetUserId(currUser);
        await UserService.RejectFriendship(Convert.ToInt64(userId), user.Id);
        Console.WriteLine("Не Дружим");

        
        
        var u =  users.ToList();
        u.Remove(user);
        users = u;



        StateHasChanged();
        return await Task.FromResult(true);
    }

}