@page "/Friends"

@using Microsoft.AspNetCore.Http
@using OtusAHLLab.Data
@using OtusAHLLab.Modules.Enums
@using OtusAHLLab.Modules.Secutity

@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Authentication;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Identity.UI.Services;

@inject IUserService UserService
@inject UserManager<AppUser> UserManager

<h1>Анкеты для дружбы</h1>

@if (UserService == null)
{
    <p><em>Loading...</em></p>
}
else
{


    if (users.Any())
    {

    
        <table class="table">
            <thead>
            <tr>
                <th>Имя</th>
                <th>Фамилия</th>
                <th>Возраст</th>
                <th>Город</th>
                <th>Увлечения</th>
                <th>Пол</th>
                <th>-</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var user in users)
            {
                <tr  >   
                 
                    <td>@user.FirstName</td>
                    <td>@user.LastName</td>
                    <td>@user.Age</td>
                    <td>@user.City</td>
                    <td>@user.Hobby</td>
                    <td>@user.Gender</td>

                    <td>
                        <button class="btn btn-success" @onclick="@(() => RemoveFromFriend(@user))">Отдружится</button>
                    </td>
                

                </tr>
            }
            </tbody>
        </table>

    }
    else
    {
        <h4>У Вас  еще нет друзей</h4> 
    }

}

@code {
    private IEnumerable<AppUser> users;


    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }


    protected override async Task OnInitializedAsync()
    {

        var authState = await authenticationStateTask;
        var user = authState.User;


        // var id= UserManager.GetUserId(user);
        var id = UserManager.GetUserId(user);
        users = await UserService.GetFriendsAsync(Convert.ToInt64(id));

       

       // users = await UserService.GetAllUserAsync(StatusCode.All);
    }

    private async Task<bool> RemoveFromFriend(AppUser appUser)
    {
        var authState = await authenticationStateTask;
        var user = authState.User;
        var userId = UserManager.GetUserId(user);
         await UserService.RemoveFriendship(Convert.ToInt64(userId), appUser.Id);


        var u =  users.ToList();
        u.Remove(appUser);
        users = u;



        StateHasChanged();
        return await Task.FromResult(true);

    }

}